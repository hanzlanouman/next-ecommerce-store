"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-auth";
exports.ids = ["vendor-chunks/next-auth"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-auth/lib/client.js":
/*!**********************************************!*\
  !*** ./node_modules/next-auth/lib/client.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSessionError: () => (/* binding */ ClientSessionError),\n/* harmony export */   apiBaseUrl: () => (/* binding */ apiBaseUrl),\n/* harmony export */   fetchData: () => (/* binding */ fetchData),\n/* harmony export */   now: () => (/* binding */ now),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   useOnline: () => (/* binding */ useOnline)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/core/errors */ \"(ssr)/./node_modules/@auth/core/errors.js\");\n/* __next_internal_client_entry_do_not_use__ ClientSessionError,fetchData,apiBaseUrl,useOnline,now,parseUrl auto */ \n\n/** @todo */ class ClientFetchError extends _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n}\n/** @todo */ class ClientSessionError extends _auth_core_errors__WEBPACK_IMPORTED_MODULE_1__.AuthError {\n}\n// ------------------------ Internal ------------------------\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow `fetchData` to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n * @internal\n */ async function fetchData(path, __NEXTAUTH, logger, req = {}) {\n    const url = `${apiBaseUrl(__NEXTAUTH)}/${path}`;\n    try {\n        const options = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...req?.headers?.cookie ? {\n                    cookie: req.headers.cookie\n                } : {}\n            }\n        };\n        if (req?.body) {\n            options.body = JSON.stringify(req.body);\n            options.method = \"POST\";\n        }\n        const res = await fetch(url, options);\n        const data = await res.json();\n        if (!res.ok) throw data;\n        return data;\n    } catch (error) {\n        logger.error(new ClientFetchError(error.message, error));\n        return null;\n    }\n}\n/** @internal */ function apiBaseUrl(__NEXTAUTH) {\n    if (true) {\n        // Return absolute path when called server side\n        return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`;\n    }\n    // Return relative path when called client side\n    return __NEXTAUTH.basePath;\n}\n/** @internal  */ function useOnline() {\n    const [isOnline, setIsOnline] = react__WEBPACK_IMPORTED_MODULE_0__.useState(typeof navigator !== \"undefined\" ? navigator.onLine : false);\n    const setOnline = ()=>setIsOnline(true);\n    const setOffline = ()=>setIsOnline(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        window.addEventListener(\"online\", setOnline);\n        window.addEventListener(\"offline\", setOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", setOnline);\n            window.removeEventListener(\"offline\", setOffline);\n        };\n    }, []);\n    return isOnline;\n}\n/**\n * Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC.\n * @internal\n */ function now() {\n    return Math.floor(Date.now() / 1000);\n}\n/**\n * Returns an `URL` like object to make requests/redirects from server-side\n * @internal\n */ function parseUrl(url) {\n    const defaultUrl = new URL(\"http://localhost:3000/api/auth\");\n    if (url && !url.startsWith(\"http\")) {\n        url = `https://${url}`;\n    }\n    const _url = new URL(url ?? defaultUrl);\n    const path = (_url.pathname === \"/\" ? defaultUrl.pathname : _url.pathname)// Remove trailing slash\n    .replace(/\\/$/, \"\");\n    const base = `${_url.origin}${path}`;\n    return {\n        origin: _url.origin,\n        host: _url.host,\n        path,\n        base,\n        toString: ()=>base\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL2xpYi9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7b0hBQytCO0FBQ2U7QUFDOUMsVUFBVSxHQUNWLE1BQU1FLHlCQUF5QkQsd0RBQVNBO0FBQ3hDO0FBQ0EsVUFBVSxHQUNILE1BQU1FLDJCQUEyQkYsd0RBQVNBO0FBQ2pEO0FBQ0EsNkRBQTZEO0FBQzdEOzs7Ozs7O0NBT0MsR0FDTSxlQUFlRyxVQUFVQyxJQUFJLEVBQUVDLFVBQVUsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxNQUFNQyxNQUFNLENBQUMsRUFBRUMsV0FBV0osWUFBWSxDQUFDLEVBQUVELEtBQUssQ0FBQztJQUMvQyxJQUFJO1FBQ0EsTUFBTU0sVUFBVTtZQUNaQyxTQUFTO2dCQUNMLGdCQUFnQjtnQkFDaEIsR0FBSUosS0FBS0ksU0FBU0MsU0FBUztvQkFBRUEsUUFBUUwsSUFBSUksT0FBTyxDQUFDQyxNQUFNO2dCQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xFO1FBQ0o7UUFDQSxJQUFJTCxLQUFLTSxNQUFNO1lBQ1hILFFBQVFHLElBQUksR0FBR0MsS0FBS0MsU0FBUyxDQUFDUixJQUFJTSxJQUFJO1lBQ3RDSCxRQUFRTSxNQUFNLEdBQUc7UUFDckI7UUFDQSxNQUFNQyxNQUFNLE1BQU1DLE1BQU1WLEtBQUtFO1FBQzdCLE1BQU1TLE9BQU8sTUFBTUYsSUFBSUcsSUFBSTtRQUMzQixJQUFJLENBQUNILElBQUlJLEVBQUUsRUFDUCxNQUFNRjtRQUNWLE9BQU9BO0lBQ1gsRUFDQSxPQUFPRyxPQUFPO1FBQ1ZoQixPQUFPZ0IsS0FBSyxDQUFDLElBQUlyQixpQkFBaUJxQixNQUFNQyxPQUFPLEVBQUVEO1FBQ2pELE9BQU87SUFDWDtBQUNKO0FBQ0EsY0FBYyxHQUNQLFNBQVNiLFdBQVdKLFVBQVU7SUFDakMsSUFBSSxJQUE2QixFQUFFO1FBQy9CLCtDQUErQztRQUMvQyxPQUFPLENBQUMsRUFBRUEsV0FBV21CLGFBQWEsQ0FBQyxFQUFFbkIsV0FBV29CLGNBQWMsQ0FBQyxDQUFDO0lBQ3BFO0lBQ0EsK0NBQStDO0lBQy9DLE9BQU9wQixXQUFXcUIsUUFBUTtBQUM5QjtBQUNBLGVBQWUsR0FDUixTQUFTQztJQUNaLE1BQU0sQ0FBQ0MsVUFBVUMsWUFBWSxHQUFHOUIsMkNBQWMsQ0FBQyxPQUFPZ0MsY0FBYyxjQUFjQSxVQUFVQyxNQUFNLEdBQUc7SUFDckcsTUFBTUMsWUFBWSxJQUFNSixZQUFZO0lBQ3BDLE1BQU1LLGFBQWEsSUFBTUwsWUFBWTtJQUNyQzlCLDRDQUFlLENBQUM7UUFDWnFDLE9BQU9DLGdCQUFnQixDQUFDLFVBQVVKO1FBQ2xDRyxPQUFPQyxnQkFBZ0IsQ0FBQyxXQUFXSDtRQUNuQyxPQUFPO1lBQ0hFLE9BQU9FLG1CQUFtQixDQUFDLFVBQVVMO1lBQ3JDRyxPQUFPRSxtQkFBbUIsQ0FBQyxXQUFXSjtRQUMxQztJQUNKLEdBQUcsRUFBRTtJQUNMLE9BQU9OO0FBQ1g7QUFDQTs7O0NBR0MsR0FDTSxTQUFTVztJQUNaLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0MsS0FBS0gsR0FBRyxLQUFLO0FBQ25DO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0ksU0FBU25DLEdBQUc7SUFDeEIsTUFBTW9DLGFBQWEsSUFBSUMsSUFBSTtJQUMzQixJQUFJckMsT0FBTyxDQUFDQSxJQUFJc0MsVUFBVSxDQUFDLFNBQVM7UUFDaEN0QyxNQUFNLENBQUMsUUFBUSxFQUFFQSxJQUFJLENBQUM7SUFDMUI7SUFDQSxNQUFNdUMsT0FBTyxJQUFJRixJQUFJckMsT0FBT29DO0lBQzVCLE1BQU14QyxPQUFPLENBQUMyQyxLQUFLQyxRQUFRLEtBQUssTUFBTUosV0FBV0ksUUFBUSxHQUFHRCxLQUFLQyxRQUFRLENBQ3JFLHdCQUF3QjtLQUN2QkMsT0FBTyxDQUFDLE9BQU87SUFDcEIsTUFBTUMsT0FBTyxDQUFDLEVBQUVILEtBQUtJLE1BQU0sQ0FBQyxFQUFFL0MsS0FBSyxDQUFDO0lBQ3BDLE9BQU87UUFDSCtDLFFBQVFKLEtBQUtJLE1BQU07UUFDbkJDLE1BQU1MLEtBQUtLLElBQUk7UUFDZmhEO1FBQ0E4QztRQUNBRyxVQUFVLElBQU1IO0lBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWVjb21tLy4vbm9kZV9tb2R1bGVzL25leHQtYXV0aC9saWIvY2xpZW50LmpzPzQ0NjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF1dGhFcnJvciB9IGZyb20gXCJAYXV0aC9jb3JlL2Vycm9yc1wiO1xuLyoqIEB0b2RvICovXG5jbGFzcyBDbGllbnRGZXRjaEVycm9yIGV4dGVuZHMgQXV0aEVycm9yIHtcbn1cbi8qKiBAdG9kbyAqL1xuZXhwb3J0IGNsYXNzIENsaWVudFNlc3Npb25FcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XG59XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gSW50ZXJuYWwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIElmIHBhc3NlZCAnYXBwQ29udGV4dCcgdmlhIGdldEluaXRpYWxQcm9wcygpIGluIF9hcHAuanNcbiAqIHRoZW4gZ2V0IHRoZSByZXEgb2JqZWN0IGZyb20gY3R4IGFuZCB1c2UgdGhhdCBmb3IgdGhlXG4gKiByZXEgdmFsdWUgdG8gYWxsb3cgYGZldGNoRGF0YWAgdG9cbiAqIHdvcmsgc2VlbWxlc3NseSBpbiBnZXRJbml0aWFsUHJvcHMoKSBvbiBzZXJ2ZXIgc2lkZVxuICogcGFnZXMgKmFuZCogaW4gX2FwcC5qcy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKHBhdGgsIF9fTkVYVEFVVEgsIGxvZ2dlciwgcmVxID0ge30pIHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlCYXNlVXJsKF9fTkVYVEFVVEgpfS8ke3BhdGh9YDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIC4uLihyZXE/LmhlYWRlcnM/LmNvb2tpZSA/IHsgY29va2llOiByZXEuaGVhZGVycy5jb29raWUgfSA6IHt9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChyZXE/LmJvZHkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KTtcbiAgICAgICAgICAgIG9wdGlvbnMubWV0aG9kID0gXCJQT1NUXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgICAgIGlmICghcmVzLm9rKVxuICAgICAgICAgICAgdGhyb3cgZGF0YTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBsb2dnZXIuZXJyb3IobmV3IENsaWVudEZldGNoRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IpKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwaUJhc2VVcmwoX19ORVhUQVVUSCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIFJldHVybiBhYnNvbHV0ZSBwYXRoIHdoZW4gY2FsbGVkIHNlcnZlciBzaWRlXG4gICAgICAgIHJldHVybiBgJHtfX05FWFRBVVRILmJhc2VVcmxTZXJ2ZXJ9JHtfX05FWFRBVVRILmJhc2VQYXRoU2VydmVyfWA7XG4gICAgfVxuICAgIC8vIFJldHVybiByZWxhdGl2ZSBwYXRoIHdoZW4gY2FsbGVkIGNsaWVudCBzaWRlXG4gICAgcmV0dXJuIF9fTkVYVEFVVEguYmFzZVBhdGg7XG59XG4vKiogQGludGVybmFsICAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU9ubGluZSgpIHtcbiAgICBjb25zdCBbaXNPbmxpbmUsIHNldElzT25saW5lXSA9IFJlYWN0LnVzZVN0YXRlKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBuYXZpZ2F0b3Iub25MaW5lIDogZmFsc2UpO1xuICAgIGNvbnN0IHNldE9ubGluZSA9ICgpID0+IHNldElzT25saW5lKHRydWUpO1xuICAgIGNvbnN0IHNldE9mZmxpbmUgPSAoKSA9PiBzZXRJc09ubGluZShmYWxzZSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgc2V0T25saW5lKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHNldE9mZmxpbmUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgc2V0T25saW5lKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBzZXRPZmZsaW5lKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIGlzT25saW5lO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBlbGFwc2VkIHNpbmNlIEphbnVhcnkgMSwgMTk3MCAwMDowMDowMCBVVEMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gYFVSTGAgbGlrZSBvYmplY3QgdG8gbWFrZSByZXF1ZXN0cy9yZWRpcmVjdHMgZnJvbSBzZXJ2ZXItc2lkZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgICBjb25zdCBkZWZhdWx0VXJsID0gbmV3IFVSTChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvYXV0aFwiKTtcbiAgICBpZiAodXJsICYmICF1cmwuc3RhcnRzV2l0aChcImh0dHBcIikpIHtcbiAgICAgICAgdXJsID0gYGh0dHBzOi8vJHt1cmx9YDtcbiAgICB9XG4gICAgY29uc3QgX3VybCA9IG5ldyBVUkwodXJsID8/IGRlZmF1bHRVcmwpO1xuICAgIGNvbnN0IHBhdGggPSAoX3VybC5wYXRobmFtZSA9PT0gXCIvXCIgPyBkZWZhdWx0VXJsLnBhdGhuYW1lIDogX3VybC5wYXRobmFtZSlcbiAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG4gICAgICAgIC5yZXBsYWNlKC9cXC8kLywgXCJcIik7XG4gICAgY29uc3QgYmFzZSA9IGAke191cmwub3JpZ2lufSR7cGF0aH1gO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9yaWdpbjogX3VybC5vcmlnaW4sXG4gICAgICAgIGhvc3Q6IF91cmwuaG9zdCxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgYmFzZSxcbiAgICAgICAgdG9TdHJpbmc6ICgpID0+IGJhc2UsXG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsIkF1dGhFcnJvciIsIkNsaWVudEZldGNoRXJyb3IiLCJDbGllbnRTZXNzaW9uRXJyb3IiLCJmZXRjaERhdGEiLCJwYXRoIiwiX19ORVhUQVVUSCIsImxvZ2dlciIsInJlcSIsInVybCIsImFwaUJhc2VVcmwiLCJvcHRpb25zIiwiaGVhZGVycyIsImNvb2tpZSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibWV0aG9kIiwicmVzIiwiZmV0Y2giLCJkYXRhIiwianNvbiIsIm9rIiwiZXJyb3IiLCJtZXNzYWdlIiwiYmFzZVVybFNlcnZlciIsImJhc2VQYXRoU2VydmVyIiwiYmFzZVBhdGgiLCJ1c2VPbmxpbmUiLCJpc09ubGluZSIsInNldElzT25saW5lIiwidXNlU3RhdGUiLCJuYXZpZ2F0b3IiLCJvbkxpbmUiLCJzZXRPbmxpbmUiLCJzZXRPZmZsaW5lIiwidXNlRWZmZWN0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwicGFyc2VVcmwiLCJkZWZhdWx0VXJsIiwiVVJMIiwic3RhcnRzV2l0aCIsIl91cmwiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJiYXNlIiwib3JpZ2luIiwiaG9zdCIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-auth/lib/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/next-auth/react.js":
/*!*****************************************!*\
  !*** ./node_modules/next-auth/react.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionContext: () => (/* binding */ SessionContext),\n/* harmony export */   SessionProvider: () => (/* binding */ SessionProvider),\n/* harmony export */   getCsrfToken: () => (/* binding */ getCsrfToken),\n/* harmony export */   getProviders: () => (/* binding */ getProviders),\n/* harmony export */   getSession: () => (/* binding */ getSession),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   useSession: () => (/* binding */ useSession)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _lib_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/client.js */ \"(ssr)/./node_modules/next-auth/lib/client.js\");\n/**\n *\n * Client-side methods for NextAuth.js.\n *\n * @module react\n */ /* __next_internal_client_entry_do_not_use__ SessionContext,useSession,getSession,getCsrfToken,getProviders,signIn,signOut,SessionProvider auto */ \n\n\n// This behaviour mirrors the default behaviour for getting the site name that\n// happens server side in server/index.js\n// 1. An empty value is legitimate when the code is being invoked client side as\n//    relative URLs are valid in that context and so defaults to empty.\n// 2. When invoked server side the value is picked up from an environment\n//    variable and defaults to 'http://localhost:3000'.\nconst __NEXTAUTH = {\n    baseUrl: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL ?? process.env.VERCEL_URL).origin,\n    basePath: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL).path,\n    baseUrlServer: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL_INTERNAL ?? process.env.NEXTAUTH_URL ?? process.env.VERCEL_URL).origin,\n    basePathServer: (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.parseUrl)(process.env.NEXTAUTH_URL_INTERNAL ?? process.env.NEXTAUTH_URL).path,\n    _lastSync: 0,\n    _session: undefined,\n    _getSession: ()=>{}\n};\nfunction broadcast() {\n    if (typeof BroadcastChannel !== \"undefined\") {\n        return new BroadcastChannel(\"next-auth\");\n    }\n    return {\n        postMessage: ()=>{},\n        addEventListener: ()=>{},\n        removeEventListener: ()=>{}\n    };\n}\n// TODO:\nconst logger = {\n    debug: console.debug,\n    error: console.error,\n    warn: console.warn\n};\nconst SessionContext = react__WEBPACK_IMPORTED_MODULE_1__.createContext?.(undefined);\n/**\n * React Hook that gives you access to the logged in user's session data and lets you modify it.\n *\n * :::info\n * You will likely not need `useSession` if you are using the [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router).\n * :::\n */ function useSession(options) {\n    if (!SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    // @ts-expect-error Satisfy TS if branch on line below\n    const value = react__WEBPACK_IMPORTED_MODULE_1__.useContext(SessionContext);\n    if (!value && \"development\" !== \"production\") {\n        throw new Error(\"[next-auth]: `useSession` must be wrapped in a <SessionProvider />\");\n    }\n    const { required, onUnauthenticated } = options ?? {};\n    const requiredAndNotLoading = required && value.status === \"unauthenticated\";\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        if (requiredAndNotLoading) {\n            const url = `/api/auth/signin?${new URLSearchParams({\n                error: \"SessionRequired\",\n                callbackUrl: window.location.href\n            })}`;\n            if (onUnauthenticated) onUnauthenticated();\n            else window.location.href = url;\n        }\n    }, [\n        requiredAndNotLoading,\n        onUnauthenticated\n    ]);\n    if (requiredAndNotLoading) {\n        return {\n            data: value.data,\n            update: value.update,\n            status: \"loading\"\n        };\n    }\n    return value;\n}\nasync function getSession(params) {\n    const session = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"session\", __NEXTAUTH, logger, params);\n    if (params?.broadcast ?? true) {\n        broadcast().postMessage({\n            event: \"session\",\n            data: {\n                trigger: \"getSession\"\n            }\n        });\n    }\n    return session;\n}\n/**\n * Returns the current Cross-Site Request Forgery Token (CSRF Token)\n * required to make requests that changes state. (e.g. signing in or out, or updating the session).\n *\n * [CSRF Prevention: Double Submit Cookie](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie)\n * @internal\n */ async function getCsrfToken() {\n    const response = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"csrf\", __NEXTAUTH, logger);\n    return response?.csrfToken;\n}\n/**\n * Returns a client-safe configuration object of the currently\n * available providers.\n * @internal\n */ async function getProviders() {\n    return (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"providers\", __NEXTAUTH, logger);\n}\n/**\n * Initiate a signin flow or send the user to the signin page listing all possible providers.\n * Handles CSRF protection.\n */ async function signIn(provider, options, authorizationParams) {\n    const { callbackUrl = window.location.href, redirect = true } = options ?? {};\n    const baseUrl = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.apiBaseUrl)(__NEXTAUTH);\n    const providers = await getProviders();\n    if (!providers) {\n        window.location.href = `${baseUrl}/error`;\n        return;\n    }\n    if (!provider || !(provider in providers)) {\n        window.location.href = `${baseUrl}/signin?${new URLSearchParams({\n            callbackUrl\n        })}`;\n        return;\n    }\n    const isCredentials = providers[provider].type === \"credentials\";\n    const isEmail = providers[provider].type === \"email\";\n    const isSupportingReturn = isCredentials || isEmail;\n    const signInUrl = `${baseUrl}/${isCredentials ? \"callback\" : \"signin\"}/${provider}`;\n    const _signInUrl = `${signInUrl}?${new URLSearchParams(authorizationParams)}`;\n    const res = await fetch(_signInUrl, {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\"\n        },\n        // @ts-expect-error\n        body: new URLSearchParams({\n            ...options,\n            csrfToken: await getCsrfToken(),\n            callbackUrl\n        })\n    });\n    const data = await res.json();\n    // TODO: Do not redirect for Credentials and Email providers by default in next major\n    if (redirect || !isSupportingReturn) {\n        const url = data.url ?? callbackUrl;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\")) window.location.reload();\n        return;\n    }\n    const error = new URL(data.url).searchParams.get(\"error\");\n    if (res.ok) {\n        await __NEXTAUTH._getSession({\n            event: \"storage\"\n        });\n    }\n    return {\n        error,\n        status: res.status,\n        ok: res.ok,\n        url: error ? null : data.url\n    };\n}\n/**\n * Initiate a signout, by destroying the current session.\n * Handles CSRF protection.\n */ async function signOut(options) {\n    const { callbackUrl = window.location.href } = options ?? {};\n    const baseUrl = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.apiBaseUrl)(__NEXTAUTH);\n    const fetchOptions = {\n        method: \"post\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"X-Auth-Return-Redirect\": \"1\"\n        },\n        // @ts-expect-error\n        body: new URLSearchParams({\n            csrfToken: await getCsrfToken(),\n            callbackUrl\n        })\n    };\n    const res = await fetch(`${baseUrl}/signout`, fetchOptions);\n    const data = await res.json();\n    broadcast().postMessage({\n        event: \"session\",\n        data: {\n            trigger: \"signout\"\n        }\n    });\n    if (options?.redirect ?? true) {\n        const url = data.url ?? callbackUrl;\n        window.location.href = url;\n        // If url contains a hash, the browser does not reload the page. We reload manually\n        if (url.includes(\"#\")) window.location.reload();\n        // @ts-expect-error\n        return;\n    }\n    await __NEXTAUTH._getSession({\n        event: \"storage\"\n    });\n    return data;\n}\n/**\n * [React Context](https://react.dev/learn/passing-data-deeply-with-context) provider to wrap the app (`pages/`) to make session data available anywhere.\n *\n * When used, the session state is automatically synchronized across all open tabs/windows and they are all updated whenever they gain or lose focus\n * or the state changes (e.g. a user signs in or out) when {@link SessionProviderProps.refetchOnWindowFocus} is `true`.\n *\n * :::info\n * You will likely not need `SessionProvider` if you are using the [Next.js App Router (`app/`)](https://nextjs.org/blog/next-13-4#nextjs-app-router).\n * :::\n */ function SessionProvider(props) {\n    if (!SessionContext) {\n        throw new Error(\"React Context is unavailable in Server Components\");\n    }\n    const { children, basePath, refetchInterval, refetchWhenOffline } = props;\n    if (basePath) __NEXTAUTH.basePath = basePath;\n    /**\n     * If session was `null`, there was an attempt to fetch it,\n     * but it failed, but we still treat it as a valid initial value.\n     */ const hasInitialSession = props.session !== undefined;\n    /** If session was passed, initialize as already synced */ __NEXTAUTH._lastSync = hasInitialSession ? (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)() : 0;\n    const [session, setSession] = react__WEBPACK_IMPORTED_MODULE_1__.useState(()=>{\n        if (hasInitialSession) __NEXTAUTH._session = props.session;\n        return props.session;\n    });\n    /** If session was passed, initialize as not loading */ const [loading, setLoading] = react__WEBPACK_IMPORTED_MODULE_1__.useState(!hasInitialSession);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        __NEXTAUTH._getSession = async ({ event } = {})=>{\n            try {\n                const storageEvent = event === \"storage\";\n                // We should always update if we don't have a client session yet\n                // or if there are events from other tabs/windows\n                if (storageEvent || __NEXTAUTH._session === undefined) {\n                    __NEXTAUTH._lastSync = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)();\n                    __NEXTAUTH._session = await getSession({\n                        broadcast: !storageEvent\n                    });\n                    setSession(__NEXTAUTH._session);\n                    return;\n                }\n                if (// If there is no time defined for when a session should be considered\n                // stale, then it's okay to use the value we have until an event is\n                // triggered which updates it\n                !event || // If the client doesn't have a session then we don't need to call\n                // the server to check if it does (if they have signed in via another\n                // tab or window that will come through as a \"stroage\" event\n                // event anyway)\n                __NEXTAUTH._session === null || // Bail out early if the client session is not stale yet\n                (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)() < __NEXTAUTH._lastSync) {\n                    return;\n                }\n                // An event or session staleness occurred, update the client session.\n                __NEXTAUTH._lastSync = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.now)();\n                __NEXTAUTH._session = await getSession();\n                setSession(__NEXTAUTH._session);\n            } catch (error) {\n                logger.error(new _lib_client_js__WEBPACK_IMPORTED_MODULE_2__.ClientSessionError(error.message, error));\n            } finally{\n                setLoading(false);\n            }\n        };\n        __NEXTAUTH._getSession();\n        return ()=>{\n            __NEXTAUTH._lastSync = 0;\n            __NEXTAUTH._session = undefined;\n            __NEXTAUTH._getSession = ()=>{};\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        const handle = ()=>__NEXTAUTH._getSession({\n                event: \"storage\"\n            });\n        // Listen for storage events and update session if event fired from\n        // another window (but suppress firing another event to avoid a loop)\n        // Fetch new session data but tell it to not to fire another event to\n        // avoid an infinite loop.\n        // Note: We could pass session data through and do something like\n        // `setData(message.data)` but that can cause problems depending\n        // on how the session object is being used in the client; it is\n        // more robust to have each window/tab fetch it's own copy of the\n        // session object rather than share it across instances.\n        broadcast().addEventListener(\"message\", handle);\n        return ()=>broadcast().removeEventListener(\"message\", handle);\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        const { refetchOnWindowFocus = true } = props;\n        // Listen for when the page is visible, if the user switches tabs\n        // and makes our tab visible again, re-fetch the session, but only if\n        // this feature is not disabled.\n        const visibilityHandler = ()=>{\n            if (refetchOnWindowFocus && document.visibilityState === \"visible\") __NEXTAUTH._getSession({\n                event: \"visibilitychange\"\n            });\n        };\n        document.addEventListener(\"visibilitychange\", visibilityHandler, false);\n        return ()=>document.removeEventListener(\"visibilitychange\", visibilityHandler, false);\n    }, [\n        props.refetchOnWindowFocus\n    ]);\n    const isOnline = (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.useOnline)();\n    // TODO: Flip this behavior in next major version\n    const shouldRefetch = refetchWhenOffline !== false || isOnline;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        if (refetchInterval && shouldRefetch) {\n            const refetchIntervalTimer = setInterval(()=>{\n                if (__NEXTAUTH._session) {\n                    __NEXTAUTH._getSession({\n                        event: \"poll\"\n                    });\n                }\n            }, refetchInterval * 1000);\n            return ()=>clearInterval(refetchIntervalTimer);\n        }\n    }, [\n        refetchInterval,\n        shouldRefetch\n    ]);\n    const value = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n            data: session,\n            status: loading ? \"loading\" : session ? \"authenticated\" : \"unauthenticated\",\n            async update (data) {\n                if (loading || !session) return;\n                setLoading(true);\n                const newSession = await (0,_lib_client_js__WEBPACK_IMPORTED_MODULE_2__.fetchData)(\"session\", __NEXTAUTH, logger, typeof data === \"undefined\" ? undefined : {\n                    body: {\n                        csrfToken: await getCsrfToken(),\n                        data\n                    }\n                });\n                setLoading(false);\n                if (newSession) {\n                    setSession(newSession);\n                    broadcast().postMessage({\n                        event: \"session\",\n                        data: {\n                            trigger: \"getSession\"\n                        }\n                    });\n                }\n                return newSession;\n            }\n        }), [\n        session,\n        loading\n    ]);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(SessionContext.Provider, {\n        value: value,\n        children: children\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-auth/react.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/index.js":
/*!*****************************************!*\
  !*** ./node_modules/next-auth/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NextAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/rsc/react-jsx-runtime.js\");\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n/* harmony import */ var _lib_env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/env.js */ \"(rsc)/./node_modules/next-auth/lib/env.js\");\n/* harmony import */ var _lib_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/index.js */ \"(rsc)/./node_modules/next-auth/lib/index.js\");\n/* harmony import */ var next_headers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/headers.js */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n\n/**\n *\n * :::warning Note\n * This is the documentation for `next-auth@latest`. Check out the documentation of v4 [here](https://next-auth.js.org).\n * :::\n *\n * If you are looking for the migration guide, visit the [`next-auth@latest` Migration Guide](https://nextjs.authjs.dev/v5).\n *\n * ## Installation\n *\n * ```bash npm2yarn2pnpm\n * npm install next-auth@5 @auth/core\n * ```\n *\n * ## Signing in and signing out\n *\n * The App Router embraces Server Actions that can be leveraged to decrease the amount of JavaScript sent to the browser.\n *\n * :::info\n * [Next.js Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions) is **in alpha stage**. In the future, NextAuth.js will integrate with Server Actions and provide first-party APIs.\n * Until then, here is how you can use NextAuth.js to log in and log out without JavaScript.\n * :::\n *\n * ```ts title=\"app/auth-components.tsx\"\n * import { CSRF_experimental } from \"../auth\"\n *\n * export function SignIn({ provider, ...props }: any) {\n *   return (\n *     <form action={`/api/auth/signin/${provider}`} method=\"post\">\n *       <button {{...props}}/>\n *       <CSRF_experimental/>\n *     </form>\n *   )\n * }\n *\n * export function SignOut(props: any) {\n *   return (\n *     <form action=\"/api/auth/signout\" method=\"post\">\n *       <button {...props}/>\n *       <CSRF_experimental/>\n *     </form>\n *   )\n * }\n * ```\n *\n * Alternatively, you can create client components, using the `signIn()` and `signOut` methods:\n *\n * ```ts title=\"app/auth-components.tsx\"\n * \"use client\"\n * import { signIn, signOut } from \"next-auth/react\"\n *\n * export function SignIn({provider, ...props}: any) {\n *   return <button {...props} onClick={() => signIn(provider)}/>\n * }\n *\n * export function SignOut(props: any) {\n *   return <button {...props} onClick={() => signOut()}/>\n * }\n * ```\n *\n * Then, you could for example use it like this:\n *\n * ```ts title=app/page.tsx\n * import { SignIn, SignOut } from \"./auth-components\"\n *\n * export default async function Page() {\n *   const session = await auth()\n *   if (session) {\n *     return (\n *       <>\n *         <pre>{JSON.stringify(session, null, 2)}</pre>\n *         <SignOut>Sign out</SignOut>\n *       </>\n *     )\n *   }\n *   return <SignIn provider=\"github\">Sign in with GitHub</SignIn>\n * }\n * ```\n *\n *\n * ## Environment variable inferrence\n *\n * `NEXTAUTH_URL` and `NEXTAUTH_SECRET` have been inferred since v4.\n *\n * Since NextAuth.js v5 can also automatically infer environment variables that are prefiexed with `AUTH_`.\n *\n * For example `AUTH_GITHUB_ID` and `AUTH_GITHUB_SECRET` will be used as the `clientId` and `clientSecret` options for the GitHub provider.\n *\n * :::tip\n * The environment variable name inferring has the following format for OAuth providers: `AUTH_{PROVIDER}_{ID|SECRET}`.\n *\n * `PROVIDER` is the uppercase snake case version of the provider's id, followed by either `ID` or `SECRET` respectively.\n * :::\n *\n * `AUTH_SECRET` and `AUTH_URL` are also aliased for `NEXTAUTH_SECRET` and `NEXTAUTH_URL` for consistency.\n *\n * To add social login to your app, the configuration becomes:\n *\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"next-auth/providers/GitHub\"\n * export const { handlers, auth } = NextAuth({ providers: [ GitHub ] })\n * ```\n *\n * And the `.env.local` file:\n *\n * ```sh title=\".env.local\"\n * AUTH_GITHUB_ID=...\n * AUTH_GITHUB_SECRET=...\n * AUTH_SECRET=...\n * ```\n *\n * If you need to override the default values for a provider, you can still call it as a function `GitHub({...})` as before.\n *\n * @module index\n */ \n\n\n\n/**\n *  Initialize NextAuth.js.\n *\n *  @example\n * ```ts title=\"auth.ts\"\n * import NextAuth from \"next-auth\"\n * import GitHub from \"@auth/core/providers/github\"\n *\n * export const { handlers, auth } = NextAuth({ providers: [GitHub] })\n * ```\n */ function NextAuth(config) {\n    (0,_lib_env_js__WEBPACK_IMPORTED_MODULE_2__.setEnvDefaults)(config);\n    const httpHandler = (req)=>(0,_auth_core__WEBPACK_IMPORTED_MODULE_1__.Auth)(req, config);\n    return {\n        handlers: {\n            GET: httpHandler,\n            POST: httpHandler\n        },\n        // @ts-expect-error\n        auth: (0,_lib_index_js__WEBPACK_IMPORTED_MODULE_3__.initAuth)(config),\n        async CSRF_experimental () {\n            const value = await (0,_auth_core__WEBPACK_IMPORTED_MODULE_1__.Auth)(new Request(\"http://a/api/auth/csrf\", {\n                headers: (0,next_headers_js__WEBPACK_IMPORTED_MODULE_4__.headers)()\n            }), config).then((res)=>res.json()).then((res)=>res?.csrfToken);\n            if (!value) throw new Error(\"CSRF token could not be found.\");\n            return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"input\", {\n                type: \"hidden\",\n                name: \"csrfToken\",\n                value: value\n            });\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/lib/env.js":
/*!*******************************************!*\
  !*** ./node_modules/next-auth/lib/env.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   providersEnv: () => (/* binding */ providersEnv),\n/* harmony export */   setEnvDefaults: () => (/* binding */ setEnvDefaults)\n/* harmony export */ });\n// TODO: Generate this from the available providers\nconst providersEnv = {\n    \"42-school\": [\n        process.env.AUTH_42_SCHOOL_ID,\n        process.env.AUTH_42_SCHOOL_SECRET,\n        process.env.AUTH_42_SCHOOL_ISSUER\n    ],\n    apple: [\n        process.env.AUTH_APPLE_ID,\n        process.env.AUTH_APPLE_SECRET,\n        process.env.AUTH_APPLE_ISSUER\n    ],\n    asgardeo: [\n        process.env.AUTH_ASGARDEO_ID,\n        process.env.AUTH_ASGARDEO_SECRET,\n        process.env.AUTH_ASGARDEO_ISSUER\n    ],\n    atlassian: [\n        process.env.AUTH_ATLASSIAN_ID,\n        process.env.AUTH_ATLASSIAN_SECRET,\n        process.env.AUTH_ATLASSIAN_ISSUER\n    ],\n    auth0: [\n        process.env.AUTH_AUTH0_ID,\n        process.env.AUTH_AUTH0_SECRET,\n        process.env.AUTH_AUTH0_ISSUER\n    ],\n    authentik: [\n        process.env.AUTH_AUTHENTIK_ID,\n        process.env.AUTH_AUTHENTIK_SECRET,\n        process.env.AUTH_AUTHENTIK_ISSUER\n    ],\n    \"azure-ad\": [\n        process.env.AUTH_AAD_ID,\n        process.env.AUTH_AAD_SECRET,\n        process.env.AUTH_AAD_ISSUER\n    ],\n    \"azure-ad-b2c\": [\n        process.env.AUTH_AAD_B2C_ID,\n        process.env.AUTH_AAD_B2C_SECRET,\n        process.env.AUTH_AAD_B2C_ISSUER\n    ],\n    battlenet: [\n        process.env.AUTH_BATTLENET_ID,\n        process.env.AUTH_BATTLENET_SECRET,\n        process.env.AUTH_BATTLENET_ISSUER\n    ],\n    beyondidentity: [\n        process.env.AUTH_BEYOND_IDENTITY_ID,\n        process.env.AUTH_BEYOND_IDENTITY_SECRET,\n        process.env.AUTH_BEYOND_IDENTITY_ISSUER\n    ],\n    box: [\n        process.env.AUTH_BOX_ID,\n        process.env.AUTH_BOX_SECRET,\n        process.env.AUTH_BOX_ISSUER\n    ],\n    \"boxyhq-saml\": [\n        process.env.AUTH_BOXYHQ_SAML_ID,\n        process.env.AUTH_BOXYHQ_SAML_SECRET,\n        process.env.AUTH_BOXYHQ_SAML_ISSUER\n    ],\n    bungie: [\n        process.env.AUTH_BUNGIE_ID,\n        process.env.AUTH_BUNGIE_SECRET,\n        process.env.AUTH_BUNGIE_ISSUER\n    ],\n    cognito: [\n        process.env.AUTH_COGNITO_ID,\n        process.env.AUTH_COGNITO_SECRET,\n        process.env.AUTH_COGNITO_ISSUER\n    ],\n    coinbase: [\n        process.env.AUTH_COINBASE_ID,\n        process.env.AUTH_COINBASE_SECRET,\n        process.env.AUTH_COINBASE_ISSUER\n    ],\n    descope: [\n        process.env.AUTH_DESCOPE_ID,\n        process.env.AUTH_DESCOPE_SECRET\n    ],\n    discord: [\n        process.env.AUTH_DISCORD_ID,\n        process.env.AUTH_DISCORD_SECRET,\n        process.env.AUTH_DISCORD_ISSUER\n    ],\n    dropbox: [\n        process.env.AUTH_DROPBOX_ID,\n        process.env.AUTH_DROPBOX_SECRET,\n        process.env.AUTH_DROPBOX_ISSUER\n    ],\n    \"duende-identity-server6\": [\n        process.env.AUTH_IDS6_ID,\n        process.env.AUTH_IDS6_SECRET,\n        process.env.AUTH_IDS6_ISSUER\n    ],\n    eveonline: [\n        process.env.AUTH_EVEONLINE_ID,\n        process.env.AUTH_EVEONLINE_SECRET,\n        process.env.AUTH_EVEONLINE_ISSUER\n    ],\n    facebook: [\n        process.env.AUTH_FACEBOOK_ID,\n        process.env.AUTH_FACEBOOK_SECRET,\n        process.env.AUTH_FACEBOOK_ISSUER\n    ],\n    faceit: [\n        process.env.AUTH_FACEIT_ID,\n        process.env.AUTH_FACEIT_SECRET,\n        process.env.AUTH_FACEIT_ISSUER\n    ],\n    foursquare: [\n        process.env.AUTH_FOURSQUARE_ID,\n        process.env.AUTH_FOURSQUARE_SECRET,\n        process.env.AUTH_FOURSQUARE_ISSUER\n    ],\n    freshbooks: [\n        process.env.AUTH_FRESHBOOKS_ID,\n        process.env.AUTH_FRESHBOOKS_SECRET,\n        process.env.AUTH_FRESHBOOKS_ISSUER\n    ],\n    fusionauth: [\n        process.env.AUTH_FUSIONAUTH_ID,\n        process.env.AUTH_FUSIONAUTH_SECRET,\n        process.env.AUTH_FUSIONAUTH_ISSUER\n    ],\n    github: [\n        process.env.AUTH_GITHUB_ID,\n        process.env.AUTH_GITHUB_SECRET,\n        process.env.AUTH_GITHUB_ISSUER\n    ],\n    gitlab: [\n        process.env.AUTH_GITLAB_ID,\n        process.env.AUTH_GITLAB_SECRET,\n        process.env.AUTH_GITLAB_ISSUER\n    ],\n    google: [\n        process.env.AUTH_GOOGLE_ID,\n        process.env.AUTH_GOOGLE_SECRET,\n        process.env.AUTH_GOOGLE_ISSUER\n    ],\n    hubspot: [\n        process.env.AUTH_HUBSPOT_ID,\n        process.env.AUTH_HUBSPOT_SECRET,\n        process.env.AUTH_HUBSPOT_ISSUER\n    ],\n    \"identity-server4\": [\n        process.env.AUTH_IDS4_ID,\n        process.env.AUTH_IDS4_SECRET,\n        process.env.AUTH_IDS4_ISSUER\n    ],\n    instagram: [\n        process.env.AUTH_INSTAGRAM_ID,\n        process.env.AUTH_INSTAGRAM_SECRET,\n        process.env.AUTH_INSTAGRAM_ISSUER\n    ],\n    kakao: [\n        process.env.AUTH_KAKAO_ID,\n        process.env.AUTH_KAKAO_SECRET,\n        process.env.AUTH_KAKAO_ISSUER\n    ],\n    keycloak: [\n        process.env.AUTH_KEYCLOAK_ID,\n        process.env.AUTH_KEYCLOAK_SECRET,\n        process.env.AUTH_KEYCLOAK_ISSUER\n    ],\n    line: [\n        process.env.AUTH_LINE_ID,\n        process.env.AUTH_LINE_SECRET,\n        process.env.AUTH_LINE_ISSUER\n    ],\n    linkedin: [\n        process.env.AUTH_LINKEDIN_ID,\n        process.env.AUTH_LINKEDIN_SECRET,\n        process.env.AUTH_LINKEDIN_ISSUER\n    ],\n    mailchimp: [\n        process.env.AUTH_MAILCHIMP_ID,\n        process.env.AUTH_MAILCHIMP_SECRET,\n        process.env.AUTH_MAILCHIMP_ISSUER\n    ],\n    mailru: [\n        process.env.AUTH_MAILRU_ID,\n        process.env.AUTH_MAILRU_SECRET,\n        process.env.AUTH_MAILRU_ISSUER\n    ],\n    mattermost: [\n        process.env.AUTH_MATTERMOST_ID,\n        process.env.AUTH_MATTERMOST_SECRET,\n        process.env.AUTH_MATTERMOST_ISSUER\n    ],\n    medium: [\n        process.env.AUTH_MEDIUM_ID,\n        process.env.AUTH_MEDIUM_SECRET,\n        process.env.AUTH_MEDIUM_ISSUER\n    ],\n    naver: [\n        process.env.AUTH_NAVER_ID,\n        process.env.AUTH_NAVER_SECRET,\n        process.env.AUTH_NAVER_ISSUER\n    ],\n    netlify: [\n        process.env.AUTH_NETLIFY_ID,\n        process.env.AUTH_NETLIFY_SECRET,\n        process.env.AUTH_NETLIFY_ISSUER\n    ],\n    notion: [\n        process.env.AUTH_NOTION_ID,\n        process.env.AUTH_NOTION_SECRET,\n        process.env.AUTH_NOTION_ISSUER\n    ],\n    okta: [\n        process.env.AUTH_OKTA_ID,\n        process.env.AUTH_OKTA_SECRET,\n        process.env.AUTH_OKTA_ISSUER\n    ],\n    onelogin: [\n        process.env.AUTH_ONELOGIN_ID,\n        process.env.AUTH_ONELOGIN_SECRET,\n        process.env.AUTH_ONELOGIN_ISSUER\n    ],\n    osso: [\n        process.env.AUTH_OSSO_ID,\n        process.env.AUTH_OSSO_SECRET,\n        process.env.AUTH_OSSO_ISSUER\n    ],\n    osu: [\n        process.env.AUTH_OSU_ID,\n        process.env.AUTH_OSU_SECRET,\n        process.env.AUTH_OSU_ISSUER\n    ],\n    patreon: [\n        process.env.AUTH_PATREON_ID,\n        process.env.AUTH_PATREON_SECRET,\n        process.env.AUTH_PATREON_ISSUER\n    ],\n    pinterest: [\n        process.env.AUTH_PINTEREST_ID,\n        process.env.AUTH_PINTEREST_SECRET,\n        process.env.AUTH_PINTEREST_ISSUER\n    ],\n    pipedrive: [\n        process.env.AUTH_PIPEDRIVE_ID,\n        process.env.AUTH_PIPEDRIVE_SECRET,\n        process.env.AUTH_PIPEDRIVE_ISSUER\n    ],\n    reddit: [\n        process.env.AUTH_REDDIT_ID,\n        process.env.AUTH_REDDIT_SECRET,\n        process.env.AUTH_REDDIT_ISSUER\n    ],\n    salesforce: [\n        process.env.AUTH_SALESFORCE_ID,\n        process.env.AUTH_SALESFORCE_SECRET,\n        process.env.AUTH_SALESFORCE_ISSUER\n    ],\n    slack: [\n        process.env.AUTH_SLACK_ID,\n        process.env.AUTH_SLACK_SECRET,\n        process.env.AUTH_SLACK_ISSUER\n    ],\n    spotify: [\n        process.env.AUTH_SPOTIFY_ID,\n        process.env.AUTH_SPOTIFY_SECRET,\n        process.env.AUTH_SPOTIFY_ISSUER\n    ],\n    strava: [\n        process.env.AUTH_STRAVA_ID,\n        process.env.AUTH_STRAVA_SECRET,\n        process.env.AUTH_STRAVA_ISSUER\n    ],\n    todoist: [\n        process.env.AUTH_TODOIST_ID,\n        process.env.AUTH_TODOIST_SECRET,\n        process.env.AUTH_TODOIST_ISSUER\n    ],\n    trakt: [\n        process.env.AUTH_TRAKT_ID,\n        process.env.AUTH_TRAKT_SECRET,\n        process.env.AUTH_TRAKT_ISSUER\n    ],\n    twitch: [\n        process.env.AUTH_TWITCH_ID,\n        process.env.AUTH_TWITCH_SECRET,\n        process.env.AUTH_TWITCH_ISSUER\n    ],\n    twitter: [\n        process.env.AUTH_TWITTER_ID,\n        process.env.AUTH_TWITTER_SECRET,\n        process.env.AUTH_TWITTER_ISSUER\n    ],\n    \"united-effects\": [\n        process.env.AUTH_UNITED_EFFECTS_ID,\n        process.env.AUTH_UNITED_EFFECTS_SECRET,\n        process.env.AUTH_UNITED_EFFECTS_ISSUER\n    ],\n    vk: [\n        process.env.AUTH_VK_ID,\n        process.env.AUTH_VK_SECRET,\n        process.env.AUTH_VK_ISSUER\n    ],\n    wikimedia: [\n        process.env.AUTH_WIKIMEDIA_ID,\n        process.env.AUTH_WIKIMEDIA_SECRET,\n        process.env.AUTH_WIKIMEDIA_ISSUER\n    ],\n    wordpress: [\n        process.env.AUTH_WORDPRESS_ID,\n        process.env.AUTH_WORDPRESS_SECRET,\n        process.env.AUTH_WORDPRESS_ISSUER\n    ],\n    workos: [\n        process.env.AUTH_WORKOS_ID,\n        process.env.AUTH_WORKOS_SECRET,\n        process.env.AUTH_WORKOS_ISSUER\n    ],\n    yandex: [\n        process.env.AUTH_YANDEX_ID,\n        process.env.AUTH_YANDEX_SECRET,\n        process.env.AUTH_YANDEX_ISSUER\n    ],\n    zitadel: [\n        process.env.AUTH_ZITADEL_ID,\n        process.env.AUTH_ZITADEL_SECRET,\n        process.env.AUTH_ZITADEL_ISSUER\n    ],\n    zoho: [\n        process.env.AUTH_ZOHO_ID,\n        process.env.AUTH_ZOHO_SECRET,\n        process.env.AUTH_ZOHO_ISSUER\n    ],\n    zoom: [\n        process.env.AUTH_ZOOM_ID,\n        process.env.AUTH_ZOOM_SECRET,\n        process.env.AUTH_ZOOM_ISSUER\n    ]\n};\nfunction setEnvDefaults(config) {\n    config.secret ?? (config.secret = process.env.NEXTAUTH_SECRET ?? process.env.AUTH_SECRET);\n    config.trustHost ?? (config.trustHost = !!(process.env.NEXTAUTH_URL ?? process.env.AUTH_TRUST_HOST ?? process.env.VERCEL ?? \"development\" !== \"production\"));\n    config.redirectProxyUrl ?? (config.redirectProxyUrl = process.env.AUTH_REDIRECT_PROXY_URL);\n    config.providers = config.providers.map((p)=>{\n        if (typeof p !== \"function\") return p;\n        const provider = p();\n        if (provider.type === \"oauth\" || provider.type === \"oidc\") {\n            const [clientId, clientSecret, issuer] = providersEnv[provider.id] ?? [];\n            provider.clientId ?? (provider.clientId = clientId);\n            provider.clientSecret ?? (provider.clientSecret = clientSecret);\n            provider.issuer ?? (provider.issuer = issuer);\n        }\n        return provider;\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/lib/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/next-auth/lib/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initAuth: () => (/* binding */ initAuth)\n/* harmony export */ });\n/* harmony import */ var _auth_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core */ \"(rsc)/./node_modules/@auth/core/index.js\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n\n\nfunction detectOrigin(_headers) {\n    const host = _headers.get(\"x-forwarded-host\") ?? _headers.get(\"host\");\n    const protocol = _headers.get(\"x-forwarded-proto\") === \"http\" ? \"http\" : \"https\";\n    return new URL(process.env.NEXTAUTH_URL ?? `${protocol}://${host}`);\n}\n/** Server-side method to read the session. */ async function getSession(headers, config) {\n    const origin = detectOrigin(headers);\n    const request = new Request(`${origin}/api/auth/session`, {\n        headers: {\n            cookie: headers.get(\"cookie\") ?? \"\"\n        }\n    });\n    config.useSecureCookies ?? (config.useSecureCookies = origin.protocol === \"https:\");\n    // Since we are server-side, we don't need to filter out the session data\n    // See https://nextjs.authjs.dev/v5#authenticating-server-side\n    config.callbacks = Object.assign(config.callbacks ?? {}, {\n        session ({ session, user, token }) {\n            return {\n                ...session,\n                user: user ?? token\n            };\n        }\n    });\n    return (0,_auth_core__WEBPACK_IMPORTED_MODULE_0__.Auth)(request, config);\n}\nfunction isReqWrapper(arg) {\n    return typeof arg === \"function\";\n}\nfunction initAuth(config) {\n    return (...args)=>{\n        if (!args.length) return getSession((0,next_headers__WEBPACK_IMPORTED_MODULE_1__.headers)(), config).then((r)=>r.json());\n        if (args[0] instanceof Request) {\n            // middleare.ts\n            // export { auth as default } from \"auth\"\n            const req = args[0];\n            const ev = args[1];\n            return handleAuth([\n                req,\n                ev\n            ], config);\n        }\n        if (isReqWrapper(args[0])) {\n            // middleare.ts/router.ts\n            // import { auth } from \"auth\"\n            // export default auth((req) => { console.log(req.auth) }})\n            const userMiddlewareOrRoute = args[0];\n            return async (...args)=>{\n                return handleAuth(args, config, userMiddlewareOrRoute);\n            };\n        }\n        // API Routes, getServerSideProps\n        const request = \"req\" in args[0] ? args[0].req : args[0];\n        const response = \"res\" in args[0] ? args[0].res : args[1];\n        return getSession(// @ts-expect-error\n        new Headers(request.headers), config).then(async (authResponse)=>{\n            const { user = null, expires = null, ...rest } = await authResponse.json() ?? {};\n            // Preserve cookies set by Auth.js Core\n            const cookies = authResponse.headers.get(\"set-cookie\");\n            if (cookies) response?.setHeader(\"set-cookie\", cookies);\n            return {\n                user,\n                expires,\n                ...rest\n            };\n        });\n    };\n}\nasync function handleAuth(args, config, userMiddlewareOrRoute) {\n    const request = args[0];\n    const sessionResponse = await getSession(request.headers, config);\n    const { user = null, expires = null, ...rest } = await sessionResponse.json() ?? {};\n    // If we are handling a recognized NextAuth.js request,\n    // don't require authorization to avoid an accidental redirect loop\n    let authorized = true;\n    // Infer basePath from NEXTAUTH_URL if provided, default to /api/auth\n    const { pathname: basePath } = new URL(process.env.NEXTAUTH_URL ?? \"http://a/api/auth\");\n    if (!isNextAuthAction(request, config, basePath) && config.callbacks?.authorized) {\n        authorized = await config.callbacks.authorized({\n            request,\n            auth: {\n                user,\n                expires,\n                ...rest\n            }\n        });\n    }\n    let response = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_2__.next?.();\n    if (authorized instanceof Response) {\n        // User returned a custom response, like redirecting to a page or 401, respect it\n        response = authorized;\n    } else if (userMiddlewareOrRoute) {\n        // Execute user's middleware/handler with the augmented request\n        const augmentedReq = request;\n        augmentedReq.auth = {\n            user,\n            expires,\n            ...rest\n        };\n        response = // @ts-expect-error\n        await userMiddlewareOrRoute(augmentedReq, args[1]) ?? next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_2__.next();\n    } else if (!authorized) {\n        const signInPage = config.pages?.signIn ?? \"/api/auth/signin\";\n        if (request.nextUrl.pathname !== signInPage) {\n            // Redirect to signin page by default if not authorized\n            request.nextUrl.pathname = signInPage;\n            request.nextUrl.searchParams.set(\"callbackUrl\", request.nextUrl.href);\n            response = next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_2__.redirect(request.nextUrl);\n        }\n    }\n    // Preserve cookies set by Auth.js Core\n    const finalResponse = new Response(response?.body, response);\n    const authCookies = sessionResponse.headers.get(\"set-cookie\");\n    if (authCookies) finalResponse.headers.set(\"set-cookie\", authCookies);\n    return finalResponse;\n}\n/** Check if the request is for a NextAuth.js action. */ function isNextAuthAction(req, config, basePath) {\n    const { pathname } = req.nextUrl;\n    const action = pathname.replace(`${basePath}/`, \"\");\n    const pages = Object.values(config.pages ?? {});\n    return actions.has(action) || pages.some((page)=>pathname === page);\n}\nconst actions = new Set([\n    \"providers\",\n    \"session\",\n    \"csrf\",\n    \"signin\",\n    \"signout\",\n    \"callback\",\n    \"verify-request\",\n    \"error\"\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next-auth/providers/credentials.js":
/*!*********************************************************!*\
  !*** ./node_modules/next-auth/providers/credentials.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _auth_core_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @auth/core/providers/credentials */ \"(rsc)/./node_modules/@auth/core/providers/credentials.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC1hdXRoL3Byb3ZpZGVycy9jcmVkZW50aWFscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRDtBQUNVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1lY29tbS8uL25vZGVfbW9kdWxlcy9uZXh0LWF1dGgvcHJvdmlkZXJzL2NyZWRlbnRpYWxzLmpzPzc2MzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG5leHBvcnQgeyBkZWZhdWx0IH0gZnJvbSBcIkBhdXRoL2NvcmUvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG4iXSwibmFtZXMiOlsiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-auth/providers/credentials.js\n");

/***/ })

};
;